// Receive traces
otelcol.receiver.otlp "default" {
  grpc {
    endpoint = "0.0.0.0:4317"
  }

  http {
    endpoint = "0.0.0.0:4318"
  }

  output {
    traces  = [otelcol.processor.batch.default.input]
  }
}

otelcol.processor.batch "default" {
  output {
    metrics = []
    logs = []
    traces = [
      module.git.grafana_cloud.exports.traces_receiver,
    ]
  }
}

// Scrape Metrics
prometheus.scrape "default" {
  forward_to = [
    module.git.grafana_cloud.exports.metrics_receiver,
  ]
  targets = [
    {
      "__address__" = env("QUICKPIZZA_HOST"),
      "job" = "quickpizza",
      "instance" = "local",
    },
  ]
}

pyroscope.scrape "scrape_profiles" {
  targets = [
    {
      "__address__" = env("QUICKPIZZA_HOST"),
      "service_name" = "quickpizza",
      "instance" = "local",
    },
  ]
  forward_to = [
    module.git.grafana_cloud.exports.profiles_receiver,
  ]
  profiling_config {
    profile.goroutine {
      enabled = true
      path = "/debug/pprof/goroutine"
      delta = false
    }
    profile.process_cpu {
      enabled = true
      path = "/debug/pprof/profile"
      delta = true
    }
    profile.godeltaprof_memory {
      enabled = true
      path = "/debug/pprof/delta_heap"
    }
    profile.memory {
      enabled = false
      path = "/debug/pprof/memory"
      delta = false
    }
    profile.godeltaprof_mutex {
      enabled = true
      path = "/debug/pprof/delta_mutex"
    }
    profile.mutex {
      enabled = false
      path = "/debug/pprof/mutex"
      delta = false
    }
    profile.godeltaprof_block {
      enabled = true
      path = "/debug/pprof/delta_block"
    }
    profile.block {
      enabled = false
      path = "/debug/pprof/block"
      delta = false
    }
  } 
}

module.git "grafana_cloud" {
  repository = "https://github.com/grafana/agent-modules.git"
  path = "modules/grafana-cloud/autoconfigure/module.river"
  revision = "main"
  pull_frequency = "0s"
  arguments {
    stack_name = env("GRAFANA_CLOUD_STACK")
    token = env("GRAFANA_CLOUD_TOKEN")
  }
}
