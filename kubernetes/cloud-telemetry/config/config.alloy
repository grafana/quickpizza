// Traces
otelcol.receiver.otlp "default" {
  grpc {
    endpoint = "0.0.0.0:4317"
  }

  http {
    endpoint = "0.0.0.0:4318"
  }

  output {
    traces  = [otelcol.processor.batch.default.input]
  }
}

otelcol.processor.batch "default" {
  output {
    metrics = []
    logs = []
    traces = [
      grafana_cloud.stack.receivers.traces,
    ]
  }
}

// Metrics
discovery.kubernetes "application_pods" {
  selectors {
    label = "app.k8s.io/name=quickpizza"
    role = "pod"
  }
  role = "pod"
  namespaces {
    own_namespace = true
  }
}
prometheus.scrape "default" {
  forward_to = [
    grafana_cloud.stack.receivers.metrics,
  ]
  targets = discovery.relabel.relabel_targets.output
}

loki.source.kubernetes "pods" {
  forward_to = [
    grafana_cloud.stack.receivers.logs,
  ]
  targets    = discovery.kubernetes.application_pods.targets
}

loki.source.kubernetes_events "k8s_event_logs" {
  forward_to = [
    grafana_cloud.stack.receivers.logs,
  ]
}

discovery.relabel "relabel_targets" {
  rule {
    target_label = "job"
    source_labels = [
      "__meta_kubernetes_pod_label_app_kubernetes_io_instance",
    ]
  }
  rule {
    target_label = "service_name"
    source_labels = [
      "__meta_kubernetes_pod_label_app_kubernetes_io_instance",
    ]
  }
  rule {
    target_label = "instance"
    source_labels = [
      "__meta_kubernetes_pod_name",
    ]
  }
  targets = discovery.kubernetes.application_pods.targets
}


// TODO: not working
pyroscope.scrape "scrape_profiles" {
  forward_to = [grafana_cloud.stack.receivers.profiles]
  targets = discovery.relabel.relabel_targets.output
}
pyroscope.receive_http "default" {
   forward_to = [grafana_cloud.stack.receivers.profiles]
   http {
       listen_address = "127.0.0.1"
       listen_port = 9999
   }
}

import.git "grafana_cloud" {
  repository = "https://github.com/grafana/alloy-modules.git"
  revision = "main"
  path = "modules/cloud/grafana/cloud/module.alloy"
  pull_frequency = "0s"
}

grafana_cloud.stack "receivers" {
  stack_name = env("GRAFANA_CLOUD_STACK")
  token = env("GRAFANA_CLOUD_TOKEN")
}