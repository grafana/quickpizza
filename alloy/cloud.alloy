// Receive traces
otelcol.receiver.otlp "default" {
  grpc {
    endpoint = "0.0.0.0:4317"
  }

  http {
    endpoint = "0.0.0.0:4318"
  }

  output {
    traces  = [
      otelcol.processor.batch.default.input,
      otelcol.connector.host_info.default.input,
    ]
  }
}

otelcol.connector.host_info "default" {
  host_identifiers = ["container.name", "container.id", "service.name"]
  metrics_flush_interval = "10s"

  output {
    metrics = [otelcol.exporter.prometheus.otlp_metrics.input]
  }
}
otelcol.exporter.prometheus "otlp_metrics" {
  forward_to = [
    grafana_cloud.stack.receivers.metrics,
  ]
}

otelcol.processor.batch "default" {
  output {
    traces = [grafana_cloud.stack.receivers.traces]
  }
}

// Scrape Metrics
prometheus.scrape "default" {
  forward_to = [
    grafana_cloud.stack.receivers.metrics,
  ]
  targets = [
    {
      "__address__" = env("QUICKPIZZA_HOST"),
      "job" = "quickpizza",
      "instance" = "local",
      "service_name" = "quickpizza",
      "service_namespace" = "quickpizza",
    },
  ]
}

discovery.docker "all_containers" {
  host = "unix:///var/run/docker.sock"
}

discovery.relabel "quickpizza" {
  rule {
    target_label = "instance"
    source_labels = [
      "__meta_docker_container_name",
    ]
    regex ="/(.*)"
    action = "replace"
  }
  rule {
    target_label = "job"
    source_labels = [
      "__meta_docker_container_label_com_docker_compose_project",
    ]
    regex = ".*quickpizza.*"
    action = "keep"
  }
  targets = discovery.docker.all_containers.targets
}

loki.source.docker "default" {
  host       = "unix:///var/run/docker.sock"
  targets    = discovery.relabel.quickpizza.output
  forward_to = [grafana_cloud.stack.receivers.logs]
  labels = {
    service_name = "quickpizza",
    service_namespace = "quickpizza",
  }
}

import.git "grafana_cloud" {
  repository = "https://github.com/grafana/alloy-modules.git"
  revision = "main"
  path = "modules/cloud/grafana/cloud/module.alloy"
  pull_frequency = "0s"
}

// Receive profiling data
pyroscope.receive_http "default" {
   http {
       listen_address = "0.0.0.0"
       listen_port = 9999
   }
   forward_to = [grafana_cloud.stack.receivers.profiles]
}

grafana_cloud.stack "receivers" {
  stack_name = env("GRAFANA_CLOUD_STACK")
  token = env("GRAFANA_CLOUD_TOKEN")
}