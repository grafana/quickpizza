
import.git "grafana_cloud" {
  repository = "https://github.com/grafana/alloy-modules.git"
  revision = "main"
  path = "modules/cloud/grafana/cloud/module.alloy"
  pull_frequency = "0s"
}

grafana_cloud.stack "receivers" {
  stack_name = env("GRAFANA_CLOUD_STACK")
  token = env("GRAFANA_CLOUD_TOKEN")
}

// discover containers running QuickPizza
discovery.docker "application_containers" {
  host = "unix:///var/run/docker.sock"
  filter {
    name   = "label"
    values = ["service.type=application"]
  }
}

// set expected labels
discovery.relabel "application_containers" {
  rule {
    target_label = "job"
    source_labels = [
      "__meta_docker_container_name",
    ]
    regex = "/(.*)"
    replacement = "quickpizza/${1}"
  }
  rule {
    target_label = "instance"
    source_labels = [
      "__meta_docker_container_name",
    ]
    regex = "/(.*)"
    replacement = "${1}"
  }
  rule {
    target_label = "service_namespace"
    replacement = "quickpizza"
  }
  // the `namespace` label is for visualizing Profiles in Application Observability
  rule {
    target_label = "namespace"
    replacement = "quickpizza"
  }
  rule {
    target_label = "service_name"
    source_labels = [
      "__meta_docker_container_name",
    ]
    regex = "/(.*)"
    replacement = "${1}"
  }
  targets = discovery.docker.application_containers.targets
}

// Metrics
prometheus.scrape "application_containers" {
  scrape_interval = "10s"
  targets = discovery.relabel.application_containers.output
  forward_to = [grafana_cloud.stack.receivers.metrics]
}
// Logs
loki.source.docker "application_containers" {
  host       = "unix:///var/run/docker.sock"
  targets    = discovery.relabel.application_containers.output
  forward_to = [grafana_cloud.stack.receivers.logs]
}

// Profiling Pull Mode
pyroscope.scrape "application_containers" {
  // https://grafana.com/docs/pyroscope/latest/configure-client/grafana-alloy/go_pull/
  scrape_interval = "30s"
  targets = discovery.relabel.application_containers.output
  forward_to = [grafana_cloud.stack.receivers.profiles]
}

// Traces
otelcol.receiver.otlp "default" {
  grpc {
    endpoint = "0.0.0.0:4317"
  }

  http {
    endpoint = "0.0.0.0:4318"
  }

  output {
    traces  = [
      otelcol.processor.batch.default.input,
      otelcol.connector.host_info.default.input,
    ]
  }
}

otelcol.connector.host_info "default" {
  host_identifiers = ["container.name", "container.id", "service.name"]
  metrics_flush_interval = "10s"

  output {
    metrics = [otelcol.exporter.prometheus.otlp_metrics.input]
  }
}
otelcol.exporter.prometheus "otlp_metrics" {
  forward_to = [
    grafana_cloud.stack.receivers.metrics,
  ]
}
otelcol.processor.batch "default" {
  output {
    traces = [grafana_cloud.stack.receivers.traces]
  }
}