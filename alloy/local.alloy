// Receive traces
otelcol.receiver.otlp "default" {
  grpc {
    endpoint = "0.0.0.0:4317"
  }

  http {
    endpoint = "0.0.0.0:4318"
  }

  output {
    traces  = [otelcol.processor.batch.default.input]
  }
}

otelcol.processor.batch "default" {
  output {
    metrics = []
    logs = []
    traces = [
      otelcol.exporter.otlp.default.input,
    ]
  }
}

// Scrape Metrics
prometheus.scrape "default" {
  scrape_interval = "60s"
  forward_to = [
    prometheus.remote_write.default.receiver,
  ]
  targets = [
    {
      "__address__" = env("QUICKPIZZA_HOST"),
      "job" = "quickpizza",
      "instance" = "local",
      "service_name" = "quickpizza",
      "service_namespace" = "quickpizza",
    },
  ]
}


// Collect profiles

otelcol.exporter.otlp "default" {
  client {
    // TODO: Replace this with the endpoint for your trace receiver
    endpoint = env("TRACES_ENDPOINT")
    tls {
        insecure             = true
        insecure_skip_verify = true
    }
  }
}

prometheus.remote_write "default" {
  endpoint {
    // TODO: Replace this with your prometheus-compatible metrics store
    url = env("METRICS_ENDPOINT")
  }
}

discovery.docker "all_containers" {
  host = "unix:///var/run/docker.sock"
}

discovery.relabel "quickpizza" {
  rule {
    target_label = "instance"
    source_labels = [
      "__meta_docker_container_name",
    ]
    regex ="/(.*)"
    action = "replace"
  }
  rule {
    target_label = "job"
    source_labels = [
      "__meta_docker_container_label_com_docker_compose_project",
    ]
    regex = ".*quickpizza.*"
    action = "keep"
  }
  targets = discovery.docker.all_containers.targets
}

loki.source.docker "default" {
  host       = "unix:///var/run/docker.sock"
  targets    = discovery.relabel.quickpizza.output
  forward_to = [loki.write.local.receiver]
  labels = {
    service_name = "quickpizza",
    service_namespace = "quickpizza",
  }
}

loki.write "local" {
  endpoint {
    url = env("LOGS_ENDPOINT")
  }
}

// Receive profiling data
pyroscope.receive_http "default" {
   http {
       listen_address = "0.0.0.0"
       listen_port = 9999
   }
   forward_to = [pyroscope.write.local.receiver]
}

pyroscope.write "local" {
   endpoint {
       url = env("PROFILES_ENDPOINT")
   }
}