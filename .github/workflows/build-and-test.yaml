name: Build and Test
on: [push]

permissions:
  contents: read

jobs:
  runner-job:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false

      - name: Setup Go
        uses: actions/setup-go@v5

      - name: Setup Goimports
        run: go install golang.org/x/tools/cmd/goimports@latest

      - uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Check Formatting (Go)
        run: make format-check

      - name: Build Binary
        run: make build

      - name: Check Formatting (TypeScript)
        run: cd pkg/web && npm run lint

      - name: Start Server
        # Use enable these features in our own deployment, so we might as well
        # "enable" them during testing as well to simulate a more realistic setup.
        env:
          QUICKPIZZA_OTLP_ENDPOINT: "http://localhost"
          QUICKPIZZA_TRUST_CLIENT_TRACEID: "1"
          QUICKPIZZA_PYROSCOPE_ENDPOINT: "http://localhost"
        run: ./bin/quickpizza &

      # Enable cache for system files: https://github.com/actions/toolkit/issues/946
      - name: root suid tar
        run: sudo chown root /bin/tar && sudo chmod u+s /bin/tar

      - name: Cache k6
        id: cache-k6
        uses: actions/cache@v4
        with:
          path: /usr/bin/k6
          key: ${{ runner.os }}-k6

      # cannot use the k6 docker image because it does not allow executing shell commands
      - name: Install k6 in Ubuntu
        if: steps.cache-k6.outputs.cache-hit != 'true'
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      # Install Chrome (or chromium) when using ACT, as the default ACT image does not include it.
      # Note that running the browser in a container like Snap or Flatpak is not supported.
      - name: Install chrome
        if: ${{ env.ACT }}
        run: |
          wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
          sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list'
          sudo apt update && sudo apt install -y google-chrome-stable

      # If you plan to run ACT on Apple Silicon, be aware that Chrome has not yet released an arm64 version. In this case, you have to:
      # 1. Enable the option on Docker Desktop: `Use Rosetta for x86/amd64 emulation on Apple Silicon`
      # 2. Run ACT using the `--container-architecture linux/amd64` flag. For example:
      #    act -W .github/workflows/k6-tests.yaml --container-architecture linux/amd64

      - name: Install jq
        uses: dcarbone/install-jq-action@e397bd87438d72198f81efd21f876461183d383a # v3.0.1

      - name: Run k6 foundations tests
        run: ./scripts/run-tests.sh -t **/k6/foundations/*.js -u http://localhost:3333
        env:
          ACT: ${{ env.ACT }}

      - name: Run k6 internal tests
        run: ./scripts/run-tests.sh -t **/k6/internal/*.js -u http://localhost:3333
        env:
          ACT: ${{ env.ACT }}

      - name: Run k6 browser tests
        run: ./scripts/run-tests.sh -t **/k6/browser/*.js -u http://localhost:3333
        env:
          ACT: ${{ env.ACT }}

      - name: Stop Server
        run: pkill -9 quickpizza
